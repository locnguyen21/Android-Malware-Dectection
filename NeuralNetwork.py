import numpy as np
import pandas as pd
from tensorflow import keras
from keras.utils import to_categorical
import datetime
import time
from keras.utils.vis_utils import plot_model
from keras.models import model_from_json
from keras.utils import plot_model
from sklearn.model_selection import train_test_split
#from Evaluate import *
from keras.utils.vis_utils import plot_model
from Evaluate import *

def readdt(trainfile,labelfile):
    train = pd.read_csv(trainfile, header=None)
    print(train.shape)
    print(train)
    labels = pd.read_csv(labelfile, header=None)
    labels = labels.values.ravel()
    #print(type(train))
    print(labels)
    #print(train.shape) #(125973, 18)  125973 dòng dữ liệu, 18 thuộc tính
    #print(labels_encoded.shape) #(125973, 2) 2 tương ứng 0 1 binary classification
    return train,labels

#Keras models are trained on Numpy arrays of input data and labels.

def Creat_Model():
    frame = pd.read_csv("Data/Train.csv", header=0)
    # for column in data.columns:
    #     if data[column].dtype == type(object):
    #         le = preprocessing.LabelEncoder()
    #         data[column] = le.fit_transform(data[column].astype(str))
    # label = pd.read_csv("Data/Raw_Data/Testing-data/Label_Train.csv",header = 0)
    data = frame.iloc[:, 0:9]
    header = list(data)
    label = frame.iloc[:, -1]
    #X_train, X_test, y_train, y_test = train_test_split(data, label, test_size=0.2, shuffle=False)

    # y_train = y_train.values.ravel()
    # y_test = y_test.values.ravel()
    #input_dim là số thuộc tính
    input_dim = data.shape[1]
    #Creat_model
    Model = keras.Sequential([
        #Inputlayer
        keras.layers.Dense(512, input_dim= input_dim,activation='relu'),
        keras.layers.Dense(256,activation='relu'),
        keras.layers.Dense(256,activation='relu'),
        keras.layers.Dense(1,activation='sigmoid')

    ])
    #Before training a model, need to configure the learning process, which is done via the compile
    Model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics=['accuracy'])

    #Training
   # plot_model(Model, to_file='Neural_Networks/ANNmodel.png', show_shapes=True, show_layer_names=True)
    print('begin training')
    start = time.time()
    print(datetime.datetime.utcnow())

    Model.fit(data,label,epochs=5,batch_size=32)

    print('training done at')
    end = time.time()
    print(end - start)
    print('save model to JSON file')
    # lưu model vào file JSON
    model_json = Model.to_json()
    with open ("Model/NNmodel.json","w") as json_file:
        json_file.write(model_json)

    # lưu weights vào file HDF5
    Model.save_weights("Model/NNmodel.h5")
    print("Saved model to disk")
    #Model.summary()

    # labels_test = Model.predict(X_test, batch_size=32)
    # labels = Threshold(labels_test)
    #
    # a = 0
    # for i in range(len(labels)):
    #     if (labels[i] == y_test[i]):
    #         a = a + 1
    #
    # print('Accuracy: ' + str(a * 100 / len(labels)))

def TestModel():
    #load json và tạo model
    json_file = open('Model/NNmodel.json','r')
    loaded_model_json = json_file.read()
    json_file.close()
    load_model = model_from_json(loaded_model_json)
    #load weights vào model
    load_model.load_weights("Model/NNmodel.h5")

    #load test data
    test = pd.read_csv("Data/Test.csv", header=0)
    data = test.iloc[:,0:9]
    label = test.iloc[:,-1]

    labels_test = load_model.predict(data,batch_size = 32)

    print(labels_test)
    result = Threshold(labels_test)
    #print(labels.shape)
    #pd.DataFrame(labels_test).to_csv("Neural_Networks/Result.csv", header=None, index=None)
    #pd.DataFrame(labels).to_csv("Neural_Networks/Result_with_threshold.csv",header=None,index=None)
    return result, label

def Threshold(labels_test):
    labels = []
    for i in labels_test:
        if (i >= 0.5):
            a = 1
            labels.append(a)
        else:
            a = 0
            labels.append(a)
    labels = np.asarray(labels)
    #print(type(labels))
    return labels

#train,labels = readdt('Data/Train.csv','Data/TrainLabel.csv')
#Creat_Model()

result, label = TestModel()
Evaluate_Model(result,label)
