from sklearn import tree
import pickle
import datetime
import time
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
import pydotplus
import collections
from sklearn.tree import export_graphviz
from os import system
import pydotplus
from Evaluate import *

def DTrees():
    frame = pd.read_csv("Data/Train.csv", header=0)
    data = frame.iloc[:,0:9]
    header = list(data)
    # data = frame[["'Fwd Packet Length Std'","'Bwd Packet Length Min'","'Flow IAT Max'",'Init_Win_bytes_forward',
    #               'Init_Win_bytes_backward', 'min_seg_size_forward']]
    label = frame.iloc[:,-1]
    # gọi model
    clf = tree.DecisionTreeClassifier()
    # training model
    clf.fit(data, label)
    # lưu model
    model = 'Model/DTrees_model.sav'
    pickle.dump(clf, open(model, 'wb'))
    print('Done')

def VisualGraph():
    clf = pickle.load(open('Model/DTrees_model.sav', 'rb'))
    frame = pd.read_csv("Data/Test.csv", header=0)
    data = frame.iloc[:,0:9]
    header = list(data)

    # with open('graph.dot', 'w') as file:
    #     tree.export_graphviz(clf, out_file=file)
    # file.close()

    dot_data = tree.export_graphviz(clf, out_file= None, feature_names= header,filled=True,rounded=True)

    graph = pydotplus.graph_from_dot_data(dot_data)
    colors = ('turquoise', 'orange')
    edges = collections.defaultdict(list)

    for edge in graph.get_edge_list():
        edges[edge.get_source()].append(int(edge.get_destination()))

    for edge in edges:
        edges[edge].sort()
        for i in range(2):
            dest = graph.get_node(str(edges[edge][i]))[0]
            dest.set_fillcolor(colors[i])

    graph.write_png('tree.png')

def Test():
    #load model
    clf = pickle.load(open('Model/DTrees_model.sav', 'rb'))
    #load dữ liệu training
    testData = pd.read_csv('Data/Test.csv', header=0)
    #tách nhãn với dữ liệu
    data = testData.iloc[:, 0:9]
    label = testData.iloc[:, -1]
    #result: dự đoán
    result = clf.predict(data)
    #label: kết quả thật
    label = label.values
    print("Evaluate model Tree:")
    return result, label

#DTrees()
result, label = Test()
Evaluate_Model(result,label)
#VisualGraph()
