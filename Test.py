#from Preprocessing import *
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from yellowbrick.features import RFECV
from sklearn.model_selection import StratifiedKFold
import numpy as np

def Cleandata():
    # file = "C:\Android_Malware_Detection\Data\Train\Benign_Train.csv"
    # frame = pd.read_csv(file,header = 0)
    # print(list(frame))
    #
    # file1 = "C:\Android_Malware_Detection\Data\Train.csv"
    # frame1 = pd.read_csv(file1,header = 0)
    # print(list(frame1))
    #xoa du lieu chua gia tri thieu
    file2 = "C:\Android_Malware_Detection\Data\Test_have_label.csv"
    frame2 = pd.read_csv(file2,header = 0)
    print(frame2.shape)
    print(frame2.isnull().sum())
    frame3 = frame2.dropna()
    print(frame3.shape)
    print(frame3.isnull().sum())
    a = list(frame3)
    data_path = "C:\Android_Malware_Detection\Data\Test_clean.csv"
    pd.DataFrame(frame3).to_csv(data_path, header = a, index=None)


def TestData():
    data_path = "C:\Android_Malware_Detection\Data\Raw_Data\Full_Data.csv"
    frame = pd.read_csv(data_path, header = 0)
    print(len(list(frame)))
    #print(frame['Label'].value_counts())
    #0 malware   1411052
    #1 benign   1204821

    data = frame.iloc[:, 0:83]
    data = data.drop(["Flow ID", "Source IP", "Destination IP", "Timestamp"], axis=1)
    header = list(data)

    label = frame.iloc[:, -1]
    X_train, X_test, y_train, y_test = train_test_split(data,label, test_size = 0.4, shuffle=True)
    train_path = "C:\Android_Malware_Detection\Data\Raw_Data\Train.csv"
    test_path = "C:\Android_Malware_Detection\Data\Raw_Data\Test.csv"
    label_train = "C:\Android_Malware_Detection\Data\Raw_Data\Label_Train.csv"
    label_test = "C:\Android_Malware_Detection\Data\Raw_Data\Label_Test.csv"
    print(X_train.dtypes)
    pd.DataFrame(X_train).to_csv(train_path, header = header,index=None)
    print("Done!")
    pd.DataFrame(X_test).to_csv(test_path, header = header,index=None)
    print("Done!")
    pd.DataFrame(y_train).to_csv(label_train, header="Label", index=None)
    print("Done!")
    pd.DataFrame(y_test).to_csv(label_test, header="Label", index=None)
    #y_train = pd.Series.to_frame(y_train)
    print("Done!")
    print(y_train.value_counts())
    print(y_test.value_counts())

    # cv = StratifiedKFold(10)
    # oz = RFECV(model = RandomForestClassifier(), cv = cv, scoring = 'accuracy')
    # oz.fit(X = X_train, y = y_train)
    # print(oz.support_)
    # oz.poof()
#TestData()

def Merge_Label_Data():
    train_path = "C:\Android_Malware_Detection\Data\Raw_Data\Train.csv"
    label_train = "C:\Android_Malware_Detection\Data\Raw_Data\Label_Train.csv"

    data = pd.read_csv(train_path,header = 0)
    label = pd.read_csv(label_train,header = 0)
    data["Label"] = label["Label"]
    print(data)
    a = list(data)
    testing = "C:\Android_Malware_Detection\Data\Raw_Data\Train_weka.csv"
    pd.DataFrame(data).to_csv(testing,header = a, index = None)

#Merge_Label_Data()

def checking():
    data_path = "C:\Android_Malware_Detection\Data\Raw_Data\Data_no_binary_label.csv"
    frame = pd.read_csv(data_path,header = 0)
    #print(list(frame))
    data = frame.iloc[:,0:18]
    # data = frame[['Total Length of Bwd Packets', 'Fwd Packet Length Std',
    #               'Bwd Packet Length Min', 'Bwd Packet Length Std',
    #               'Flow IAT Max', 'Fwd IAT Min', 'Init_Win_bytes_forward',
    #               'Init_Win_bytes_backward', 'min_seg_size_forward']]
    header = list(data)
    label = frame.iloc[:,-1]
    X_train, X_test, y_train, y_test = train_test_split(data, label, test_size=0.4, shuffle=False)
    # print(y_train.value_counts())
    # print(y_test.value_counts())
    print(X_train)
    print(X_test)
    label_train = []
    label_test = []
    y_train = y_train.values
    y_test = y_test.values
    for i in y_train:
        if (i == "BENIGN"):
            i = 1
        else:
            i = 0
        label_train.append(i)
    label_train = pd.DataFrame(label_train, columns= ['Label'])
    print (label_train)
    #print(type(label_train))

    for i in y_test:
        if (i == "BENIGN"):
            i = 1
        else:
            i = 0
        label_test.append(i)
    label_test = pd.DataFrame(label_test, columns= ['Label'])
    print(label_test)

    #save data
    train_path = "C:\Android_Malware_Detection\Data\Raw_Data\Testing-data\Train.csv"
    test_path = "C:\Android_Malware_Detection\Data\Raw_Data\Testing-data\Test.csv"
    labeltrain = "C:\Android_Malware_Detection\Data\Raw_Data\Testing-data\Label_Train.csv"
    labeltest = "C:\Android_Malware_Detection\Data\Raw_Data\Testing-data\Label_Test.csv"

    pd.DataFrame(X_train).to_csv(train_path, header=header, index=None)
    pd.DataFrame(X_test).to_csv(test_path, header=header, index=None)
    pd.DataFrame(label_train).to_csv(labeltrain, header="Label", index=None)
    pd.DataFrame(label_test).to_csv(labeltest, header="Label", index=None)
    #print(y_test.value_counts())

#checking()

def Label():
    #load file .csv vào pandas
    data_path = "C:\Android_Malware_Detection\AdwareData.csv"
    frame = pd.read_csv(data_path, header = 0)
    header = list(frame)
    frame1 = frame.values
    #nhãn benign = 0, general malware và adware = 1
    for i in frame1:
        if (i[9] == "benign"):
            i[9] = 0
        else:
            i[9] = 1
    print(frame1)
    #lưu vào file mới đã có nhãn mới
    data = "C:\Android_Malware_Detection\BinAdwareData.csv"
    pd.DataFrame(frame1).to_csv(data, header = header, index = None)

Label()
